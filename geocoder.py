#Packet Parser Demo
#Ray Zupancic
import socket
import pygeoip
import dpkt
from collections import Counter

def get_geocode(address):
     try:
        gic = pygeoip.GeoIP('c:\\projects\\python\\beacon\GeoLiteCity.dat')
        record = gic.record_by_addr(address)
        #get the latitude, longitude
        geoCodeLcl = (record['latitude'], record['longitude'])
        return geoCodeLcl
     except Exception as e:
        geoCodeLcl = (0,0)
        return geoCodeLcl


def print_markers_map(geoLat, geoLong):
     latLong = []
     element = [[] for i in range(3) ]
     #need a variable to capture the set.datapoint for Google gmaps
     geoMapFileDataPoints = ""
    
     #create a master LatLong list so that packets can be sorted or counted
     for index, value in enumerate(geoLat):
          latLong.append(str(geoLat[index]) + ' ' + str(geoLong[index]))
          
     #get unique lat longs and a count of same packets in terms of src, dst
     countedList = Counter(latLong)
     
     for index, value in enumerate(countedList):
          print index, value, countedList[value] 
          element[index].append(value.split())
          element[index].append(countedList[value])
          #for troubleshooting
          #print element[index][0][0]
          
     #may have use for a unique list later
     #set will return a unique list
          #uniqueList = list(set(latLong))     
     #for index, value  in enumerate(uniqueList):
     #     print " unique ", index, value
     
     for index, values in enumerate (element):
          dataPoint1 = '\t\t\tdata.setValue(' + str(index) + ',' + '0' + ',' + str(element[index][0][0]) + ');\n'
          dataPoint2 = '\t\t\tdata.setValue(' + str(index) + ',' + '1' + ',' + str(element[index][0][1]) + ');\n'
          dataPoint3 = '\t\t\tdata.setValue(' + str(index) + ',' + '2' + ',' + str(element[index][1]) + ');\n'
          dataPoint4 = '\t\t\tdata.setValue(' + str(index) + ',' + '3' + ', \'packet_count\' );\n'
          geoMapFileDataPoints = geoMapFileDataPoints + dataPoint1 + dataPoint2 + dataPoint3 + dataPoint4
     
     try:
          geoFile = open("c:\\projects\\python\\beacon\\geoFile.html", 'w')
          geoFile.truncate() 
          geoFile.write(get_geo_map_file_header(index+1) + geoMapFileDataPoints + get_geo_map_file_footer())
     except Exception as e:
          print e
     

def get_geo_map_file_header(count):
     geoMapFileHeader = (
          '<html>\n'
          '<head>\n'
          '\t<script type=\'text/javascript\' src=\'https://www.google.com/jsapi\'></script>\n'
          '\t<script type=\'text/javascript\'>\n'
          '\t\tgoogle.load(\'visualization\', \'1\', {\'packages\': [\'geomap\']});\n'
          '\t\tgoogle.setOnLoadCallback(drawMap);\n'

          '\t\tfunction drawMap() {\n'
          '\t\t\tvar data = new google.visualization.DataTable();\n'
          '\t\t\tdata.addRows(' + str(count) + ');\n'
          '\t\t\tdata.addColumn(\'number\', \'LATITUDE\', \'Latitude\');\n'
          '\t\t\tdata.addColumn(\'number\', \'LONGITUDE\', \'Longitude\');\n'
          '\t\t\tdata.addColumn(\'number\', \'count\', \'packet_count\')\n'
          '\t\t\tdata.addColumn(\'string\', \'HOVER\',\'port\' )\n'
     )
     return geoMapFileHeader

def get_geo_map_file_footer():
     geoMapFileFooter = (
          '\t\t\tvar options = {};\n'
          '\t\t\toptions[\'region\'] = \'world\';\n'
          '\t\t\toptions[\'colors\'] = [0xaa8747, 0xccB581, 0x446000];\n'
          '\t\t\toptions[\'dataMode\'] = \'markers\';\n'
          '\t\t\toptions[\'width\'] = 900\n'
          '\t\t\toptions[\'height\']= 600\n'
          '\n'
          '\t\t\tvar container = document.getElementById(\'map_canvas\');\n'
          '\t\t\tvar geomap = new google.visualization.GeoMap(container);\n'
          '\t\t\tgeomap.draw(data, options);\n'
          '\t\t};\n'
          '\n'
          '\t</script>\n'
          '</head>\n'
          '\n'
          '\t<body>\n'
          '\t\t<div id=\'map_canvas\'></div>\n'
          '\t\t<div id=\'map_canvas2\'></div>\n'
          '\t</body>\n'
          '\n'
          '</html>\n'
     )     
     return geoMapFileFooter

def main():

     try:
         capFile = open('c:\\projects\\python\\beacon\\pcaps\\malware1.pcap', 'rb')
     except Exception as e:
         print e
     
     latList = []
     longList = []
     
     pCap = dpkt.pcap.Reader(capFile)
     for (timestamp, packet) in pCap :
          try:
               ethernet = dpkt.ethernet.Ethernet(packet)
               tcpip = ethernet.data
               #the tcpip.src and tcpip.dst contain the values, but in binary
               #need to convert to decimal
               src = socket.inet_ntoa(tcpip.src)
               dst = socket.inet_ntoa(tcpip.dst)
               geoCodeSrc = get_geocode(src)
               #print ("======================================================")
               if (geoCodeSrc[0] != 0 or geoCodeSrc[1] != 0):
                    #append the overall lat/long list
                    latList.append (geoCodeSrc[0])
                    longList.append(geoCodeSrc[1])
                    print ("lat" + str(geoCodeSrc[0]) + "long" + str(geoCodeSrc[1]) )
               #else:
                    #if the address is private, then simply use the home office lat and long - below is Denver
                    #no reason to add private addresses to overall lat/long list
                    #print ("Src: " + src + " Src Lat: " + '39.7392' + " Dst Long: " + "104.9903")
               geoCodeDst = get_geocode(dst)
               if (geoCodeDst[0] != 0 or geoCodeDst[1] != 0):
                    latList.append(geoCodeDst[0])
                    longList.append(geoCodeDst[1])
                    print ("lat" + str(geoCodeDst[0]) + "long" + str(geoCodeDst[1]) )
               #else:
                    #if the address is private, then simply use the home office lat and long - below is Denver
                    #no reason to add private addresses to overall lat/long list
                    #print ("Dst: " + dst + " Dst Lat: " + "39.7392", + " Dst Long: " + "104.9903")    
               
          except Exception as e:
               print ( e )
               
     #create the geo map file
     print_markers_map(latList, longList)

if __name__ == "__main__":
     main()